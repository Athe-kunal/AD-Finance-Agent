
Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
  0%|                                                                                                                                                                                                                                                                                                                                                                            | 0/2 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "Q:\AD project\transcripts_main.py", line 20, in <module>
    Fire(run_main)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\fire\core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\fire\core.py", line 475, in _Fire
    component, remaining_args = _CallAndUpdateTrace(
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\fire\core.py", line 691, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "Q:\AD project\transcripts_main.py", line 16, in run_main
    generate_transcripts(output_path)
  File "Q:\AD project\get_transcripts.py", line 27, in generate_transcripts
    outputs = pipe(relative_audio_path_mp3,
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\automatic_speech_recognition.py", line 357, in __call__
    return super().__call__(inputs, **kwargs)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\base.py", line 1132, in __call__
    return next(
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\pt_utils.py", line 124, in __next__
    item = next(self.iterator)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\pt_utils.py", line 266, in __next__
    processed = self.infer(next(self.iterator), **self.params)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\torch\utils\data\dataloader.py", line 630, in __next__
    data = self._next_data()
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\torch\utils\data\dataloader.py", line 674, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\torch\utils\data\_utils\fetch.py", line 32, in fetch
    data.append(next(self.dataset_iter))
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\pt_utils.py", line 183, in __next__
    processed = next(self.subiterator)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\automatic_speech_recognition.py", line 434, in preprocess
    inputs = ffmpeg_read(inputs, self.feature_extractor.sampling_rate)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\audio_utils.py", line 41, in ffmpeg_read
    raise ValueError(
ValueError: Soundfile is either not in the correct format or is malformed. Ensure that the soundfile has a valid audio file extension (e.g. wav, flac or mp3) and is not corrupted. If reading from a remote URL, ensure that the URL is the full address to **download** the audio file.
Traceback (most recent call last):
  File "Q:\AD project\transcripts_main.py", line 20, in <module>
    Fire(run_main)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\fire\core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\fire\core.py", line 475, in _Fire
    component, remaining_args = _CallAndUpdateTrace(
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\fire\core.py", line 691, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "Q:\AD project\transcripts_main.py", line 16, in run_main
    generate_transcripts(output_path)
  File "Q:\AD project\get_transcripts.py", line 27, in generate_transcripts
    outputs = pipe(relative_audio_path_mp3,
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\automatic_speech_recognition.py", line 357, in __call__
    return super().__call__(inputs, **kwargs)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\base.py", line 1132, in __call__
    return next(
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\pt_utils.py", line 124, in __next__
    item = next(self.iterator)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\pt_utils.py", line 266, in __next__
    processed = self.infer(next(self.iterator), **self.params)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\torch\utils\data\dataloader.py", line 630, in __next__
    data = self._next_data()
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\torch\utils\data\dataloader.py", line 674, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\torch\utils\data\_utils\fetch.py", line 32, in fetch
    data.append(next(self.dataset_iter))
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\pt_utils.py", line 183, in __next__
    processed = next(self.subiterator)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\automatic_speech_recognition.py", line 434, in preprocess
    inputs = ffmpeg_read(inputs, self.feature_extractor.sampling_rate)
  File "C:\Users\astar\anaconda3\envs\tf-gpu\lib\site-packages\transformers\pipelines\audio_utils.py", line 41, in ffmpeg_read
    raise ValueError(
ValueError: Soundfile is either not in the correct format or is malformed. Ensure that the soundfile has a valid audio file extension (e.g. wav, flac or mp3) and is not corrupted. If reading from a remote URL, ensure that the URL is the full address to **download** the audio file.
Generating transcripts for ADT_Project_on_IMDB_Movie_Reviews_Database.json